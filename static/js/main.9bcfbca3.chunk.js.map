{"version":3,"sources":["header/Header.tsx","models/LocalStorageCity.ts","util/Keys.ts","util/Api.ts","util/Store.ts","CityHandler/AddCity.tsx","shared/WeatherIconSelector.tsx","CityHandler/CityListItem.tsx","CityHandler/Error.tsx","CityHandler/CityHandler.tsx","models/City.ts","models/Weather.ts","WeatherHandler/SelectedWeather.tsx","WeatherHandler/WeatherListItem.tsx","util/DateHelper.ts","WeatherHandler/WeatherList.tsx","util/WeatherListHelper.ts","WeatherHandler/WeatherDisplayer.tsx","WeatherHandler/CurrentLocationWeatherHandler.tsx","WeatherHandler/WeatherHandler.tsx","App.tsx","registerServiceWorker.ts","index.tsx"],"names":["Header","_ref","name","react","className","href","concat","process","LocalStorageCity","id","Object","classCallCheck","this","apiKey","baseUrl","localStorageCities","getCities","JSON","parse","localStorage","getItem","AddCity","addCity","onChange","cityText","onSubmit","type","value","WeatherIconSelector","icon","react_fontawesome_index_es","faSun","color","faTint","faSnowflake","faCloud","ListLink","styled","a","_templateObject","ItemText","span","_templateObject2","RemoveButton","button","_templateObject3","WeatherContainer","div","_templateObject4","CityListItem","item","removeItem","as","Math","round","main","temp","shared_WeatherIconSelector","weather","onClick","e","Error","errorString","CityHandler","props","_this","possibleConstructorReturn","getPrototypeOf","call","state","cities","error","bind","assertThisInitialized","_this2","navigator","geolocation","getCurrentPosition","position","lat","lon","_position$coords","coords","latitude","longitude","fetch","then","res","status","json","statusText","unshift","setState","catch","storedCities","store","length","ids","getCurrentWeathers","map","reduce","b","list","_this3","src_CityHandler_Error","src_header_Header","CityHandler_CityListItem","key","src_CityHandler_AddCity","event","target","_this4","preventDefault","city","_this$state","undefined","find","x","toLowerCase","push","setItem","stringify","filteredCities","filter","React","City","dt","dt_txt","Weather","wind","pressure","humidity","speed","deg","SelectedWeatherView","style","transform","WeatherListItem","selectedWeather","changeSelectedWeather","isSelected","date","formatedDate","Date","replace","getHours","formatDate","WeatherList","weatherList","structuredWeather","sortedWeather","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_loop","dateString","split","keys","_iterator","Symbol","iterator","next","done","err","return","structureWeatherIntoDays","dayOfWeather","dayOfWeek","getDay","getDayFromDateString","src_WeatherHandler_WeatherListItem","getWeatherIcon","WeatherDisplayer","weatherIcon","backgroundClass","getBackgroundClass","cityName","WeatherHandler_SelectedWeather","WeatherList_WeatherList","nextProps","prevState","CurrentLocationWeatherHandler","console","src_WeatherHandler_WeatherDisplayer","WeatherHandler","match","params","App","BrowserRouter","Route","exact","path","component","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","ReactDOM","src_App_0","document","getElementById","URL","toString","origin","addEventListener","response","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.9bcfbca3.chunk.js","sourcesContent":["import * as React from 'react';\nimport './Header.css'\n\nconst baseUrl = process.env.PUBLIC_URL;\n\ninterface IProps {\n  name: string;\n}\nconst Header: React.SFC<IProps> = ({ name }) => (\n  <header className=\"App-header header\">\n    <a href={`${baseUrl}/list`} className=\"App-menu\">\n      <span className=\"fas fa-list\" />\n    </a>\n    <h1 className=\"App-title\">{name}</h1>\n  </header>\n  \n);\n\nexport default Header;\n","export class LocalStorageCity {\r\n  public id: string;\r\n  public name: string;\r\n\r\n  constructor(id: string, name: string) {\r\n    this.id = id;\r\n    this.name = name;\r\n  }\r\n}","export const apiKey = '6a703ad20e8fe394b475a7a2450b2c65';","import { apiKey } from './Keys';\nconst baseUrl = 'https://api.openweathermap.org/data/2.5/';\n\nexport function getCurrentWeather(city: string) {\n  return fetch(`${baseUrl}weather?q=${city}&appid=${apiKey}&units=metric`)\n    .then((res) => {\n      if (res.status === 200) {\n        return res.json();\n      }\n      throw new Error(res.statusText);\n    });\n}\n\nexport function getCurrentWeatherForPosition(lat: number, lon: number) {\n  return fetch(`${baseUrl}weather?lat=${lat}&lon=${lon}&appid=${apiKey}&units=metric`)\n    .then((res) => {\n      if (res.status === 200) {\n        return res.json();\n      }\n      throw new Error(res.statusText);\n    });\n}\n\nexport function getWeatherForecastForPosition(lat: number, lon: number) {\n  return fetch(`${baseUrl}forecast?lat=${lat}&lon=${lon}&appid=${apiKey}&units=metric`)\n    .then((res) => {\n      if (res.status === 200) {\n        return res.json();\n      }\n      throw new Error(res.statusText);\n    });\n}\n\nexport function getCurrentWeathers(ids: any) {\n  return fetch(`${baseUrl}group?id=${ids}&appid=${apiKey}&units=metric`)\n    .then((res) => {\n      if (res.status === 200) {\n        return res.json();\n      }\n      throw new Error(res.statusText);\n    });\n}\n\nexport function getWeatherForecast(id: string) {\n  return fetch(`${baseUrl}forecast?id=${id}&appid=${apiKey}&units=metric`)\n    .then((res) => {\n      if (res.status === 200) {\n        return res.json();\n      }\n      throw new Error(res.statusText);\n    });\n}\n","import { City } from \"../models/City\";\nimport { LocalStorageCity } from \"../models/LocalStorageCity\";\n\nconst localStorageCities = 'weather-cities';\n\nexport function getCities(): LocalStorageCity[] {\n  return JSON.parse(localStorage.getItem(localStorageCities) || '[]');\n}\n\nexport function addCity(city: LocalStorageCity) {\n  const cities = getCities();\n  cities.push(city);\n  localStorage.setItem(localStorageCities, JSON.stringify(cities));\n}\n\nexport function removeCity(city: City) {\n  const cities = getCities();\n  const filteredCities = cities.filter(x => x.name.toLowerCase() !== city.name.toLowerCase());\n  localStorage.setItem(localStorageCities, JSON.stringify(filteredCities));\n}\n","import * as React from 'react';\nimport './AddCity.css';\n\ninterface IProps {\n  addCity: any;\n  onChange: any;\n  cityText: string;\n}\n\nconst AddCity: React.SFC<IProps> = ({ addCity, onChange, cityText }) => (\n  <form onSubmit={addCity} className=\"add-city\">\n    <span className=\"add-city__header\">\n      Lägg till stad\n    </span>\n    <div className=\"add-city-input\">\n      <div className=\"add-city-input-container\">\n        <input type=\"text\" className=\"add-city-input-field__input\" onChange={onChange} value={cityText} />}\n      </div>\n      <button type=\"submit\">\n        <i className=\"fas fa-2x fa-plus-circle\" />\n      </button>\n    </div>\n  </form>\n);\n\nexport default AddCity;\n","import { faCloud, faSnowflake, faSun, faTint } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport * as React from 'react';\n\ninterface IWeatherIconProps {\n  icon: string;\n}\n\nconst WeatherIconSelector: React.SFC<IWeatherIconProps> = ({ icon }) => {\n  switch (icon) {\n    case 'Sun':\n    case 'Clear':\n      return (<FontAwesomeIcon icon={faSun} color=\"yellow\" />);\n    case 'Rain':\n      return (<FontAwesomeIcon icon={faTint} color=\"blue\" />);\n    case 'Snow':\n      return (<FontAwesomeIcon icon={faSnowflake} />);\n    case 'Clouds':\n    case 'Fog':\n    default:\n      return (<FontAwesomeIcon icon={faCloud} color=\"grey\" />);\n  }\n};\n\nexport default WeatherIconSelector;\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { City } from '../models/City';\nimport WeatherIconSelector from '../shared/WeatherIconSelector';\n\ninterface IProps {\n  item: City;\n  removeItem: any;\n}\nconst CityListItem: React.SFC<IProps> = ({ item, removeItem }) => {\n  const removeItemHandler = (e: any) => removeItem(item, e);\n  return (\n    <ListLink as=\"a\" href={`city/${item.id}`}>\n      <ItemText>\n        {item.name}\n      </ItemText>\n      <WeatherContainer>\n        <ItemText>\n          {Math.round(item.main.temp)}\n        </ItemText>\n        <WeatherIconSelector icon={item.weather[0].main} />\n        <RemoveButton type=\"button\" onClick={removeItemHandler}>\n          <i className=\"fa fa-2x fa-minus-circle\" />\n        </RemoveButton>\n      </WeatherContainer>\n    </ListLink>\n  );\n}\n\nconst ListLink = styled.a`\n  display: flex;\n  justify-content: space-between;\n  flex-direction: row;\n  border-bottom: 1px solid white;\n  padding: 10px;\n`;\nconst ItemText = styled.span`\n  padding-top: 4px;\n  padding-right: 5px;\n`;\nconst RemoveButton = styled.button`\n  color: red;\n`;\nconst WeatherContainer = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\n\nexport default CityListItem;\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport * as React from 'react';\r\nimport './Error.css';\r\n\r\ninterface IProps {\r\n  errorString: string,\r\n}\r\n\r\nconst Error: React.SFC<IProps> = ({ errorString }) => (\r\n  <div className=\"error\">\r\n    <FontAwesomeIcon icon=\"exclamation-circle\" />\r\n    <span className=\"error-text\">{errorString}</span>\r\n  </div>\r\n)\r\n\r\nexport default Error;\r\n","/* tslint:disable no-empty-interface */\nimport * as React from 'react';\nimport Header from '../header/Header';\nimport { City } from '../models/City';\nimport { LocalStorageCity } from '../models/LocalStorageCity';\nimport { getCurrentWeather, getCurrentWeatherForPosition, getCurrentWeathers } from '../util/Api';\nimport * as store from '../util/Store';\nimport AddCity from './AddCity';\nimport './CityHandler.css';\nimport CityListItem from './CityListItem';\nimport Error from './Error';\n\ninterface IProps {}\ninterface IState {\n  cities: City[],\n  cityText: string,\n  error: string,\n}\n\nclass CityHandler extends React.Component<IProps, IState> {\n  constructor(props: IProps) {\n    super(props);\n    this.state = {\n      cities: [],\n      cityText: '',\n      error: '',\n    };\n    this.removeItem = this.removeItem.bind(this);\n    this.onChange = this.onChange.bind(this);\n    this.addCity = this.addCity.bind(this);\n  }\n\n  public componentDidMount() {\n    navigator.geolocation.getCurrentPosition((position) => {\n      const { latitude, longitude } = position.coords;\n      getCurrentWeatherForPosition(latitude, longitude)\n        .then((res) => {\n          const { cities } = this.state;\n          cities.unshift(res);\n          this.setState({ cities });\n        })\n        .catch(() => this.setState({ error: 'Could not get weather of current location' }));\n    });\n    const storedCities = store.getCities();\n    if (storedCities.length > 0) {\n      const ids = storedCities.map(a => a.id).reduce((a, b) => `${a},${b}`);\n      getCurrentWeathers(ids)\n        .then(res => this.setState({ cities: res.list }))\n        .catch(() => this.setState({ error: 'Could not get weather for stored cities' }));\n    }\n  }\n\n  public render() {\n    return (\n      <div className=\"full-scale city-handler\">\n        {this.state.error ? \n          <Error errorString={this.state.error} />\n          : ''}\n        <div className=\"App-cities\">\n          <Header name=\"City view\" />\n          \n          {this.state.cities.map(item => (\n            <CityListItem key={item.name} item={item} removeItem={this.removeItem} />\n            ))}\n        </div>\n        <div className=\"App-cities\">\n          <AddCity\n            onChange={this.onChange}\n            addCity={this.addCity}\n            cityText={this.state.cityText}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  private onChange(event: any) {\n    if (event === null) {\n      return;\n    }\n    if (event.target !== null && event.target.value !== null) {\n      this.setState({ cityText: event.target.value }); // tslint: disable-line\n    }\n  }\n\n  private addCity(e: any) {\n    e.preventDefault();\n    const { cities, cityText } = this.state;\n    if (cities.find(x => x.name.toLowerCase() === cityText.toLowerCase()) !== undefined) {\n      this.setState({ error: 'City already exists' });\n      return;\n    }\n    getCurrentWeather(cityText)\n      .then((res) => {\n        cities.push(res);\n        store.addCity(new LocalStorageCity(res.id, cityText));\n        this.setState({\n          cities,\n          cityText: '',\n        });\n      })\n      .catch(() => this.setState({ error: 'Could not get weather for specified city' }));\n  }\n\n  private removeItem(item: City, e: any) {\n    e.preventDefault();\n    const { cities } = this.state;\n    const filteredCities = cities.filter(x => x.name !== item.name);\n    store.removeCity(item);\n    this.setState({\n      cities: filteredCities,\n    });\n  }\n}\n\nexport default CityHandler;\n","export class City {\r\n  public name: string\r\n  public id: string;\r\n  public main: {temp: number};\r\n  public weather: Array<{main: string}>;\r\n  public dt: number;\r\n  public dt_txt: string;\r\n  constructor() {\r\n    this.name = '';\r\n    this.id = '';\r\n    this.main = { temp: 0 };\r\n    this.weather = [{main: ''}];\r\n    this.dt = 0;\r\n    this.dt_txt = '';\r\n  }\r\n}","export class Weather {\r\n  public name: string\r\n  public id: string;\r\n  public main: {temp: number, pressure: number, humidity: number};\r\n  public weather: Array<{main: string}>;\r\n  public dt: number;\r\n  public dt_txt: string;\r\n  public wind: {speed: number, deg: number};\r\n  constructor() {\r\n    this.name = '';\r\n    this.id = '';\r\n    this.main = { temp: 0, pressure: 0, humidity: 0 };\r\n    this.weather = [{main: ''}];\r\n    this.dt = 0;\r\n    this.dt_txt = '';\r\n    this.wind = { speed: 0, deg: 0 };\r\n  }\r\n}\r\n\r\n","import * as React from \"react\";\r\nimport { Weather } from \"../models/Weather\";\r\nimport './SelectedWeather.css';\r\n\r\ninterface IPropsView {\r\n  weather: Weather;\r\n}\r\n\r\nconst SelectedWeatherView: React.SFC<IPropsView> = ({ weather }) => {\r\n  if (weather.main === null || weather.main === undefined) {\r\n    return null;\r\n  }\r\n  return (\r\n    <div className=\"selected-weather-view\">\r\n      <div className=\"current-weather\">\r\n        <span className=\"current-temperature\">{Math.round(weather.main.temp)}</span>\r\n        <span>°</span>\r\n      </div>\r\n      <div className=\"detailed-data\">\r\n        <div>\r\n          <div className=\"detailed-data__label\">Wind</div>\r\n          <div>{weather.wind.speed} m/s\r\n            <span>\r\n              <i style={{ transform: `rotate(${weather.wind.deg}deg`}} className=\"fas fa-arrow-up\"/>\r\n            </span>\r\n          </div>\r\n        </div>\r\n        <div>\r\n          <div className=\"detailed-data__label\">Humidity</div>\r\n          <div>{weather.main.humidity}%</div>\r\n        </div>\r\n        <div>\r\n          <div className=\"detailed-data__label\">Pressure</div>\r\n          <div>{weather.main.pressure}hPa</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SelectedWeatherView;\r\n","import * as React from \"react\";\r\nimport { Weather } from \"../models/Weather\";\r\nimport { formatDate } from \"../util/DateHelper\";\r\nimport WeatherIconSelector from \"../shared/WeatherIconSelector\";\r\nimport './WeatherListItem.css';\r\n\r\ninterface IWeatherViewProps {\r\n  weather: Weather;\r\n  selectedWeather: Weather;\r\n  changeSelectedWeather: ((weather: Weather) => void); // TODO: remove till parent component\r\n}\r\n\r\nconst WeatherListItem: React.SFC<IWeatherViewProps> = ({weather, selectedWeather, changeSelectedWeather}) => {\r\n  const onClick = () => changeSelectedWeather(weather);\r\n\r\n  const isSelected = weather.dt === selectedWeather.dt;\r\n\r\n  return (\r\n    <button onClick={onClick} className={`weather-list-item ${isSelected ? 'weather-list-item--selected' : ''}`}>\r\n      <span>\r\n        {formatDate(weather.dt_txt)}\r\n      </span>\r\n      <div>\r\n      <WeatherIconSelector icon={weather.weather[0].main} />\r\n      </div>\r\n      <div>\r\n        {Math.round(weather.main.temp)}°\r\n      </div>\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default WeatherListItem;\r\n","\r\nexport function formatDate(date: string) {\r\n  const formatedDate = new Date(date.replace(' ', 'T'));\r\n  const time = `${formatedDate.getHours()}`.length === 1 ? `0${formatedDate.getHours()}` : `${formatedDate.getHours()}`;\r\n  return time;\r\n}\r\n\r\n\r\nexport function getDayFromDateString(dateString: string): string {\r\n  const date = new Date(dateString);\r\n  const dayOfWeek = date.getDay();\r\n  if (dayOfWeek === (new Date().getDay())) {\r\n    return 'Today';\r\n  }\r\n  switch (dayOfWeek) {\r\n    case 0:\r\n      return 'Sunday';\r\n    case 1:\r\n      return 'Monday';\r\n    case 2:\r\n      return 'Tuesday';\r\n    case 3:\r\n      return 'Wednesday';\r\n    case 4:\r\n      return 'Thursday';\r\n    case 5:\r\n      return 'Friday';\r\n    case 6:\r\n      return 'Saturday';\r\n    default:\r\n      return '';\r\n  }\r\n}\r\n","import * as React from 'react';\r\nimport { Weather } from '../models/Weather';\r\nimport { getDayFromDateString } from '../util/DateHelper';\r\nimport { structureWeatherIntoDays } from '../util/WeatherListHelper';\r\nimport './WeatherList.css';\r\nimport WeatherListItem from './WeatherListItem';\r\n\r\ninterface IProps {\r\n  weatherList: Weather[];\r\n  selectedWeather: Weather;\r\n  changeSelectedWeather: (selectedWeather: Weather) => void;\r\n}\r\n\r\n\r\nexport const WeatherList: React.SFC<IProps> = ({ weatherList, selectedWeather, changeSelectedWeather }) => {\r\n  const structuredWeather = structureWeatherIntoDays(weatherList);\r\n  return (<div className=\"weather-list scrollbar\">\r\n    {Object.keys(structuredWeather).map(dayOfWeather => (<div key={dayOfWeather} className=\"day-container\">\r\n      <span className=\"day-title\">\r\n        {getDayFromDateString(dayOfWeather)}\r\n      </span>\r\n      <div className=\"day-weather-container\">\r\n        {structuredWeather[dayOfWeather].map((item: Weather) =>\r\n        <WeatherListItem key={item.dt} weather={item} selectedWeather={selectedWeather} changeSelectedWeather={changeSelectedWeather} />)}\r\n      </div>\r\n    </div>))}\r\n  </div>);\r\n}\r\n","import { Weather } from \"../models/Weather\";\r\n\r\nexport function structureWeatherIntoDays(weatherList: Weather[]): any {\r\n  const sortedWeather: any = {};\r\n  for(const weather of weatherList) {\r\n    const dateString = weather.dt_txt.split(' ')[0];\r\n    if (Object.keys(sortedWeather).find(x => x === dateString)) {\r\n      sortedWeather[dateString].push(weather);\r\n    } else {\r\n      sortedWeather[dateString] = [weather];\r\n    }\r\n  }\r\n  return sortedWeather;\r\n}","import * as React from 'react';\r\nimport Header from '../header/Header';\r\nimport { Weather } from '../models/Weather';\r\nimport SelectedWeather from './SelectedWeather';\r\nimport './WeatherDisplayer.css';\r\nimport { WeatherList } from './WeatherList';\r\n\r\ninterface IProps {\r\n  weatherList: Weather[];\r\n  cityName: string;\r\n}\r\n\r\ninterface IState {\r\n  selectedWeather: Weather;\r\n  weatherIcon: string;\r\n}\r\n\r\nfunction getWeatherIcon(selectedWeather: Weather): string {\r\n  if (selectedWeather.weather && selectedWeather.weather.length > 0) {\r\n    return selectedWeather.weather[0].main;\r\n  }\r\n  return '';\r\n}\r\n\r\nfunction getBackgroundClass(selectedWeather: Weather): string {\r\n  const date = new Date(selectedWeather.dt*1000);\r\n  if (19 < date.getHours() || date.getHours() < 6) {\r\n    return 'weather-displayer--night';\r\n  }\r\n  if (selectedWeather.weather && selectedWeather.weather.length > 0) {\r\n    if (selectedWeather.weather[0].main === 'Sun') {\r\n      return 'weather-displayer--sun';\r\n    }\r\n    if (selectedWeather.weather[0].main === 'Clear') {\r\n      return 'weather-displayer--sun';\r\n    }\r\n    if (selectedWeather.weather[0].main === 'Rain') {\r\n      return 'weather-displayer--rain';\r\n    }\r\n    if (selectedWeather.weather[0].main === 'Snow') {\r\n      return 'weather-displayer--snow';\r\n    }\r\n    if (selectedWeather.weather[0].main === 'Clouds') {\r\n      return 'weather-displayer--clouds';\r\n    }\r\n    return 'weather-displayer--clouds';\r\n\r\n  }\r\n  return '';\r\n}\r\n\r\n\r\nclass WeatherDisplayer extends React.PureComponent<IProps, IState> {\r\n  public static getDerivedStateFromProps(nextProps: IProps, prevState: IState) {\r\n    if (nextProps.weatherList.length > 0 && prevState.selectedWeather.name === '') {\r\n      const selectedWeather = nextProps.weatherList[0];\r\n      return {\r\n        selectedWeather,\r\n        weatherIcon: getWeatherIcon(selectedWeather),\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n  public state = {\r\n    selectedWeather: new Weather(),\r\n    weatherIcon: '',\r\n  }\r\n\r\n\r\n  public render () {\r\n    const backgroundClass = getBackgroundClass(this.state.selectedWeather);\r\n    return (\r\n      <div className={`weather-displayer ${backgroundClass}`}>\r\n        <Header name={this.props.cityName} />\r\n        <div className=\"city-item\">\r\n          <SelectedWeather\r\n            weather={this.state.selectedWeather}\r\n          />\r\n        </div>\r\n        <div className=\"footer\">\r\n          <WeatherList weatherList={this.props.weatherList} selectedWeather={this.state.selectedWeather} changeSelectedWeather={this.changeSelectedWeather} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  private changeSelectedWeather = (selectedWeather: Weather) => {\r\n    this.setState({\r\n      selectedWeather,\r\n      weatherIcon: getWeatherIcon(selectedWeather),\r\n    });\r\n  }\r\n}\r\n\r\nexport default WeatherDisplayer;\r\n","import * as React from 'react';\r\nimport { City } from '../models/City';\r\nimport { getWeatherForecastForPosition } from '../util/Api';\r\nimport WeatherDisplayer from './WeatherDisplayer';\r\n\r\ninterface IState {\r\n  city: City,\r\n  weatherList: City[],\r\n}\r\n\r\nclass CurrentLocationWeatherHandler extends React.Component<{}, IState> {\r\n  public state = {\r\n    city: new City(),\r\n    weatherList: [],\r\n  };\r\n\r\n  public componentDidMount() {\r\n    navigator.geolocation.getCurrentPosition((position) => {\r\n      const { latitude, longitude } = position.coords;\r\n      getWeatherForecastForPosition(latitude, longitude)\r\n        .then(res => this.setState({ city: res.city, weatherList: res.list }))\r\n        .catch(error => console.error(error)); //tslint:disable-line\r\n    });\r\n  }\r\n\r\n  public render() {\r\n    return <WeatherDisplayer weatherList={this.state.weatherList} cityName={this.state.city.name} />;\r\n  }\r\n}\r\n\r\nexport default CurrentLocationWeatherHandler;\r\n","import * as React from 'react';\nimport { City } from '../models/City';\nimport { Weather } from '../models/Weather';\nimport { getWeatherForecast } from '../util/Api';\nimport WeatherDisplayer from './WeatherDisplayer';\n\ninterface IState {\n  city: City;\n  weatherList: Weather[];\n}\n\ninterface IProps {\n  match: {params: {id: string}};\n}\nclass WeatherHandler extends React.Component<IProps, IState> {\n  constructor(props: IProps) {\n    super(props);\n    this.state = {\n      city: new City(),\n      weatherList: [],\n    };\n  }\n\n  public componentDidMount() {\n    getWeatherForecast(this.props.match.params.id)\n      .then(res => this.setState({ city: res.city, weatherList: res.list }))\n      .catch(error => console.error('error', error)); //tslint:disable-line\n  }\n\n\n  public render() {\n    return (\n      <WeatherDisplayer weatherList={this.state.weatherList} cityName={this.state.city.name}/>\n    );\n  }\n}\n\nexport default WeatherHandler;\n","/* tslint:disable jsx-boolean-value */\nimport * as React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport './App.css';\nimport CityHandler from './CityHandler/CityHandler';\nimport CurrentLocationWeatherHandler from './WeatherHandler/CurrentLocationWeatherHandler';\nimport WeatherHandler from './WeatherHandler/WeatherHandler';\n\nconst baseUrl = process.env.PUBLIC_URL;\n\ninterface IState {\n  error: string,\n};\n\n\nclass App extends React.Component<{}, IState> {\n  public state = {\n    error: '',\n  };\n\n  public render() {\n    if (this.state.error !== '') {\n      return <div>{this.state.error}</div>;\n    }\n    return (\n      <div className=\"App\">\n        <Router>\n          <div className=\"route-container\">\n            <Route exact path={`${baseUrl}/`} component={CurrentLocationWeatherHandler} />\n            <Route path={`${baseUrl}/list`} component={CityHandler} />\n            <Route path={`${baseUrl}/city/:id`} component={WeatherHandler} />\n          </div>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root') as HTMLElement\n);\nregisterServiceWorker();\n"],"sourceRoot":""}